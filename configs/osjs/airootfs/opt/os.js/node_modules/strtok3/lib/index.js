"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FileTokenizer_1 = require("./FileTokenizer");
const FsPromise_1 = require("./FsPromise");
const ReadStreamTokenizer_1 = require("./ReadStreamTokenizer");
const core = require("./core");
/**
 * Construct ReadStreamTokenizer from given file path.
 * @param filePath
 * @returns {Promise<FileTokenizer>}
 */
function fromFile(filePath) {
    const fs = new FsPromise_1.FsPromise();
    if (fs.pathExists(filePath)) {
        return fs.stat(filePath).then(stat => {
            return fs.open(filePath, "r").then(fd => {
                return new FileTokenizer_1.FileTokenizer(fd, stat.size);
            });
        });
    }
    else {
        return Promise.reject(new Error("File not found: " + filePath));
    }
}
exports.fromFile = fromFile;
/**
 * Construct ReadStreamTokenizer from given Stream.
 * Will set fileSize, if provided given Stream has set the .path property.
 * @param stream Stream.Readable
 * @returns {Promise<ReadStreamTokenizer>}
 */
function fromStream(stream) {
    if (stream.path) {
        return new FsPromise_1.FsPromise().stat(stream.path).then(stat => {
            return core.fromStream(stream, stat.size);
        });
    }
    return Promise.resolve(new ReadStreamTokenizer_1.ReadStreamTokenizer(stream));
}
exports.fromStream = fromStream;
/**
 * Construct ReadStreamTokenizer from given Buffer.
 * @param buffer Buffer to tokenize
 * @returns BufferTokenizer
 */
exports.fromBuffer = core.fromBuffer;
