"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractTokenizer_1 = require("./AbstractTokenizer");
const type_1 = require("./type");
const then_read_stream_1 = require("then-read-stream");
const _debug = require("debug");
const debug = _debug("strtok3:ReadStreamTokenizer");
class ReadStreamTokenizer extends AbstractTokenizer_1.AbstractTokenizer {
    constructor(stream, fileSize) {
        super();
        this.streamReader = new then_read_stream_1.StreamReader(stream);
        this.fileSize = fileSize;
    }
    /**
     * Read buffer from stream
     * @param buffer
     * @param offset is the offset in the buffer to start writing at; if not provided, start at 0
     * @param length is an integer specifying the number of bytes to read
     * @returns Promise number of bytes read
     */
    readBuffer(buffer, offset = 0, length = buffer.length, position) {
        if (length === 0) {
            return Promise.resolve(0);
        }
        if (position) {
            if (position > this.position) {
                return this.ignore(position - this.position).then(() => {
                    return this.readBuffer(buffer, offset, length);
                });
            }
            else {
                throw new Error('Cannot read from a negative offset in a stream');
            }
        }
        return this.streamReader.read(buffer, offset, length)
            .then(bytesRead => {
            this.position += bytesRead;
            if (bytesRead < length) {
                throw new Error(type_1.endOfFile);
            }
            return bytesRead;
        })
            .catch(err => {
            if (err.message === then_read_stream_1.endOfStream) // Convert EndOfStream into EndOfFile
                throw new Error(type_1.endOfFile);
            else
                throw err;
        });
    }
    /**
     * Peek (read ahead) buffer from tokenizer
     * @param buffer
     * @param offset is the offset in the buffer to start writing at; if not provided, start at 0
     * @param length is an integer specifying the number of bytes to read
     * @param position is an integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.
     * @returns {Promise<TResult|number>}
     */
    peekBuffer(buffer, offset = 0, length = buffer.length, position, maybeLess) {
        return this.streamReader.peek(buffer, offset, length)
            .catch(err => {
            if (err.message === then_read_stream_1.endOfStream) // Convert EndOfStream into EndOfFile
                throw new Error(type_1.endOfFile);
            else
                throw err;
        }).then(bytesRead => {
            if (!maybeLess && bytesRead < length) {
                throw new Error(type_1.endOfFile);
            }
            return bytesRead;
        });
    }
    ignore(length) {
        debug(`Ignore ${length} bytes in a stream`);
        const buf = Buffer.alloc(length);
        return this.readBuffer(buf); // Stream cannot skip data
    }
}
exports.ReadStreamTokenizer = ReadStreamTokenizer;
